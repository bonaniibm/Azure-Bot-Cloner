@page "/deploystatus/{NewBotName}"
@using System.Threading
@using Azure
@using Azure.Core
@using Azure.Identity
@using Azure.ResourceManager
@using Azure.ResourceManager.AppService
@using Azure.ResourceManager.AppService.Models
@using Azure.ResourceManager.Resources
@using Azure.ResourceManager.BotService
@using Azure.ResourceManager.BotService.Models
@inject IConfiguration Configuration
@inject NavigationManager NavigationManager

<h3>Deployment Status for New Bot: @NewBotName</h3>

<div class="progress">
    <div class="progress-bar" role="progressbar" style="width: @($"{progress}%");" aria-valuenow="@progress" aria-valuemin="0" aria-valuemax="100">@progress%</div>
</div>

<ul class="list-group mt-3">
    @foreach (var message in statusMessages)
    {
        <li class="list-group-item">@message</li>
    }
</ul>

@if (isCloning)
{
    <div class="alert alert-info mt-3">
        Cloning web app in progress. This may take a few minutes...
    </div>
}

@if (isCompleted)
{
    <button class="btn btn-primary mt-3" @onclick="ShowSecrets">Show Channel Secrets</button>
}

@if (showSecrets)
{
    <div class="mt-3">
        <h4>Channel Secrets:</h4>
        @if (selectedChannels.Contains("DirectLine"))
        {
            <h5>DirectLine:</h5>
            <p>Extension Key 1: @directLineKey1</p>
            <p>Extension Key 2: @directLineKey2</p>
        }
        @if (selectedChannels.Contains("WebChat"))
        {
            <h5>WebChat:</h5>
            <p>Key 1: @webChatKey1</p>
            <p>Key 2: @webChatKey2</p>
            <h5>WebChat Embed Code:</h5>
            <pre>@webChatEmbedCode</pre>
        }
        <!-- Add sections for other channels TBD -->
    </div>
}


@code {
    [Parameter]
    public string NewBotName { get; set; }

    private int progress = 0;
    private List<string> statusMessages = new List<string>();
    private bool isCompleted = false;
    private bool isCloning = false;
    private List<string> selectedChannels;
    private Dictionary<string, object> channelData;
    private string sourceBotName;
    private bool showSecrets = false;

    private string directLineKey1;
    private string directLineKey2;
    private string webChatKey1;
    private string webChatKey2;
    private string webChatEmbedCode;

    // Configuration values
    private string subscriptionId;
    private string resourceGroupName;
    private string tenantId;
    private string clientId;
    private string clientSecret;

    protected override async Task OnInitializedAsync()
    {
        // Load configuration
        subscriptionId = Configuration["AzureConfiguration:SubscriptionId"];
        resourceGroupName = Configuration["AzureConfiguration:ResourceGroupName"];
        tenantId = Configuration["AzureAd:TenantId"];
        clientId = Configuration["AzureAd:ClientId"];
        clientSecret = Configuration["AzureAd:ClientSecret"];
        var uri = new Uri(NavigationManager.Uri);
        sourceBotName = System.Web.HttpUtility.ParseQueryString(uri.Query).Get("source") ?? "SharepointAIDemoCopilot";
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
        selectedChannels = query["channels"]?.Split(',').ToList() ?? new List<string>();
        var channelDataJson = query["channelData"];
        if (!string.IsNullOrEmpty(channelDataJson))
        {
            channelData = System.Text.Json.JsonSerializer.Deserialize<Dictionary<string, object>>(Uri.UnescapeDataString(channelDataJson));
        }

        await StartDeployment();
    }

    private async Task StartDeployment()
    {
        try
        {
            UpdateStatus($"Starting deployment process for new bot: {NewBotName}", 0);

            var sourceWebAppData = await AzureBotServiceHelper.GetWebApp(sourceBotName, subscriptionId, resourceGroupName, tenantId, clientId, clientSecret);
            UpdateStatus("Source web app retrieved.", 10);

            var graphApiHelper = new GraphApiHelper(clientId, tenantId, clientSecret);
            var (appId, appSecret) = await graphApiHelper.CreateAppRegistrationAsync(NewBotName);
            UpdateStatus("App registration created.", 20);

            isCloning = true;
            UpdateStatus("Cloning web app...", 25);
            var clonedWebAppData = await AzureBotServiceHelper.CloneWebApp(NewBotName, subscriptionId, resourceGroupName, sourceWebAppData, tenantId, clientId, clientSecret, appId, appSecret);
            isCloning = false;
            UpdateStatus($"Web app cloned: {clonedWebAppData.Name}", 40);

            var sourceBot = await AzureBotServiceHelper.GetBot(sourceBotName, subscriptionId, resourceGroupName, tenantId, clientId, clientSecret);
            UpdateStatus("Source bot retrieved.", 50);

            var newBot = await AzureBotServiceHelper.CreateBot(NewBotName, subscriptionId, resourceGroupName, sourceBot, tenantId, clientId, clientSecret, appId);
            UpdateStatus("New bot created.", 60);

            int channelProgress = 60;
            int progressPerChannel = (100 - channelProgress) / selectedChannels.Count;

            foreach (var channel in selectedChannels)
            {
                switch (channel)
                {
                    case "DirectLine":
                        var directLineChannel = await AzureBotServiceHelper.CreateDirectLineChannel(NewBotName, subscriptionId, resourceGroupName, newBot, tenantId, clientId, clientSecret);
                        UpdateStatus("DirectLine channel created.", channelProgress += progressPerChannel);
                        directLineKey1 = ((DirectLineChannel)directLineChannel.Properties).Properties.ExtensionKey1;
                        directLineKey2 = ((DirectLineChannel)directLineChannel.Properties).Properties.ExtensionKey2;
                        break;
                    case "WebChat":
                        var webChatChannel = await AzureBotServiceHelper.CreateWebChatChannel(NewBotName, subscriptionId, resourceGroupName, newBot, tenantId, clientId, clientSecret);
                        UpdateStatus("WebChat channel created.", channelProgress += progressPerChannel);
                        var webChatSites = ((WebChatChannel)webChatChannel.Properties).Properties.Sites;
                        if (webChatSites.Any())
                        {
                            webChatKey1 = webChatSites[0].Key;
                            webChatKey2 = webChatSites[0].Key2;
                        }
                        webChatEmbedCode = $"<iframe src='https://webchat.botframework.com/embed/{NewBotName}?s=YOUR_SECRET_HERE' style='min-width: 400px; width: 100%; min-height: 500px;'></iframe>";
                        break;
                    case "Alexa":
                        var alexaSkillId = ((System.Text.Json.JsonElement)channelData["Alexa"]).GetProperty("AlexaSkillId").GetString();
                        await AzureBotServiceHelper.CreateAlexaChannel(NewBotName, subscriptionId, resourceGroupName, newBot, tenantId, clientId, clientSecret, alexaSkillId);
                        UpdateStatus("Alexa channel created.", channelProgress += progressPerChannel);
                        break;
                    case "Email":
                        var emailData = (System.Text.Json.JsonElement)channelData["Email"];
                        var emailAddress = emailData.GetProperty("EmailAddress").GetString();
                        var emailPassword = emailData.GetProperty("EmailPassword").GetString();
                        await AzureBotServiceHelper.CreateEmailChannel(NewBotName, subscriptionId, resourceGroupName, newBot, tenantId, clientId, clientSecret, emailAddress, emailPassword);
                        UpdateStatus("Email channel created.", channelProgress += progressPerChannel);
                        break;
                    case "DirectLineSpeech":
                        var dlsData = (System.Text.Json.JsonElement)channelData["DirectLineSpeech"];
                        var cognitiveServiceRegion = dlsData.GetProperty("CognitiveServiceRegion").GetString();
                        var cognitiveServiceSubscriptionKey = dlsData.GetProperty("CognitiveServiceSubscriptionKey").GetString();
                        await AzureBotServiceHelper.CreateDirectLineSpeechChannel(NewBotName, subscriptionId, resourceGroupName, newBot, tenantId, clientId, clientSecret, cognitiveServiceRegion, cognitiveServiceSubscriptionKey);
                        UpdateStatus("DirectLineSpeech channel created.", channelProgress += progressPerChannel);
                        break;
                    case "Line":
                        var lineData = (System.Text.Json.JsonElement)channelData["Line"];
                        var channelSecret = lineData.GetProperty("ChannelSecret").GetString();
                        var channelAccessToken = lineData.GetProperty("ChannelAccessToken").GetString();
                        await AzureBotServiceHelper.CreateLineChannel(NewBotName, subscriptionId, resourceGroupName, newBot, tenantId, clientId, clientSecret, channelSecret, channelAccessToken);
                        UpdateStatus("Line channel created.", channelProgress += progressPerChannel);
                        break;
                }
            }

            isCompleted = true;
            UpdateStatus($"Deployment of {NewBotName} completed successfully!", 100);
        }
        catch (Exception ex)
        {
            UpdateStatus($"Error during deployment: {ex.Message}", progress);
        }
    }

    private void UpdateStatus(string message, int newProgress)
    {
        statusMessages.Add(message);
        progress = newProgress;
        InvokeAsync(StateHasChanged);
    }

    private void ShowSecrets()
    {
        showSecrets = true;
    }
   
}