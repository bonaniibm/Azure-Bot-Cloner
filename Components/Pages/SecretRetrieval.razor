@page "/secretretrieval"
@using Azure.Core
@using Azure.Identity
@using Azure.ResourceManager
@using Azure.ResourceManager.BotService
@using Azure.ResourceManager.BotService.Models
@using System.ComponentModel.DataAnnotations
@inject ArmClient ArmClient
@inject IConfiguration Configuration

<h2>Retrieve Channel Secrets</h2>

<div class="card">
    <div class="card-header">
        Secret Retrieval Form
    </div>
    <div class="card-body">
        <EditForm Model="@retrievalModel" OnValidSubmit="@HandleValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label for="botName">Bot Name:</label>
                <InputText id="botName" @bind-Value="retrievalModel.BotName" class="form-control" />
            </div>

            <div class="form-group">
                <label for="channelName">Channel Name:</label>
                <InputSelect id="channelName" @bind-Value="retrievalModel.ChannelName" class="form-control">
                    <option value="">Select a channel</option>
                    <option value="DirectLineChannel">DirectLine</option>
                    <option value="WebChatChannel">WebChat</option>
                </InputSelect>
            </div>

            <button type="submit" class="btn btn-primary mt-3">Retrieve Secret</button>
        </EditForm>
    </div>
</div>

@if (retrievedSecrets != null)
{
    <div class="card mt-4">
        <div class="card-header">
            Retrieved Secrets
        </div>
        <div class="card-body">
            @foreach (var secret in retrievedSecrets)
            {
                <p><strong>@secret.Key:</strong> @secret.Value</p>
            }
        </div>
    </div>
}

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger mt-3">
        @errorMessage
    </div>
}

@code {
    private RetrievalModel retrievalModel = new RetrievalModel();
    private Dictionary<string, string> retrievedSecrets;
    private string errorMessage;

    private string subscriptionId;
    private string resourceGroupName;
    private string tenantId;
    private string clientId;
    private string clientSecret;


    protected override void OnInitialized()
    {
        subscriptionId = Configuration["AzureConfiguration:SubscriptionId"];
        resourceGroupName = Configuration["AzureConfiguration:ResourceGroupName"];
        tenantId = Configuration["AzureAd:TenantId"];
        clientId = Configuration["AzureAd:ClientId"];
        clientSecret = Configuration["AzureAd:ClientSecret"];
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            errorMessage = null;
            retrievedSecrets = null;
            TokenCredential cred = new ClientSecretCredential(tenantId, clientId, clientSecret);
            ArmClient client = new(cred);
            BotChannelName channelName = (retrievalModel.ChannelName == "DirectLineChannel") ? BotChannelName.DirectLineChannel : BotChannelName.WebChatChannel;
            ResourceIdentifier botChannelResourceId = BotChannelResource.CreateResourceIdentifier(
                subscriptionId,
                resourceGroupName,
                retrievalModel.BotName,
                channelName);
            BotChannelResource botChannel = ArmClient.GetBotChannelResource(botChannelResourceId);
            BotChannelGetWithKeysResult result = await botChannel.GetChannelWithKeysAsync();
            retrievedSecrets = new Dictionary<string, string>();
            if (channelName == BotChannelName.DirectLineChannel)
            {
                var directLineChannel = result.Properties as DirectLineChannel;
                if (directLineChannel != null)
                {
                    retrievedSecrets["Extension Key 1"] = directLineChannel.Properties.ExtensionKey1;
                    retrievedSecrets["Extension Key 2"] = directLineChannel.Properties.ExtensionKey2;
                }
            }
            else if (channelName == BotChannelName.WebChatChannel)
            {
                var webChatChannel = result.Properties as WebChatChannel;
                if (webChatChannel != null && webChatChannel.Properties.Sites.Any())
                {
                    retrievedSecrets["Key 1"] = webChatChannel.Properties.Sites[0].Key;
                    retrievedSecrets["Key 2"] = webChatChannel.Properties.Sites[0].Key2;
                    retrievedSecrets["Embed Code"] = $"<iframe src='https://webchat.botframework.com/embed/{retrievalModel.BotName}?s=YOUR_SECRET_HERE' style='min-width: 400px; width: 100%; min-height: 500px;'></iframe>";
                }
            }

            if (!retrievedSecrets.Any())
            {
                errorMessage = "No secrets found for the specified channel.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error retrieving secrets: {ex.Message}";
        }
    }

    public class RetrievalModel
    {
        [Required]
        public string BotName { get; set; }

        [Required]
        public string ChannelName { get; set; }
    }
}